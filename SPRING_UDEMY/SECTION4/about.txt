// 4,5를 합쳤음.
########### 섹션 5 ###########
@RestController : URL 매핑할때 그렇게함
빌드할때 Spring, Spring MVC, Tomcat, JSON conversion 등이 필요
유닛테스트 할때 : SpringTest, JUnit, Mockito
-> 어떻게 그룹화해서 앱을 쉽게 빌드?
Starter Project

### Spring과 Spring MVC와 Spring boot의 차이 ###
1. Spring 
: DI(의존성주입), AOP(관점 지향 프로그래밍) 트랜잭션 관리가 있음.
얘로 DB, 웹 애플리케이션, REST API만들 수 있음
@Component,@Autowired를 활용한 DI가능

2. Spring MVC
: DispatcherServlet
@Controller와 @GetMapping을 이용한 MVC 패턴 적용
Model 객체를 이용해 데이터 전달
뷰(HTML, JSP)와 함께 사용됨

3. Spring Boot
Spring을 더 쉽게 사용할 수 있도록 만듬.
Spring Boot Starter 패키지를 이용해 여러 기능을 쉽게 추가가능
pom.xml에 필요한 설정이 자동화됨 (Starter 사용)
application.properties만 수정하면 쉽게 설정 변경 가능
main() 메서드 실행만으로 웹 서버 실행 가능
내장 웹 서버(Tomcat)이 있어서 따로 웹 서버 설정이 필요없음
@SpringBootApplication으로 모든 설정 자동화
SpringApplication.run()만으로 내장 서버 실행
따로 web.xml이나 Tomcat 설정 필요 없음

요약
1. Spring : 
자바 앱 개발, DI AOP 트랜잭션 관리 , 
설정방식 : XML, JAVA 기반 
서버실행 : 직접 톰캣 설치 후 실행
프로젝트 시작 : 설정 많음
-> 일반적인 자바 앱 개발 시 사용

2.  Spring MVC : 
스프링기반 웹 앱 프레임워크, MVC 패턴을 적용한 웹개발, 
설정방식 : DispatcherServlet
서버실행 : 서블릿 컨테이너 필요
프로젝트 시작 : 설정 많음
-> 웹 만들때 사용

3. Spring Boot :
Spring을 사용하기 쉽게 만듬, 내장서버 존재, 간편한 스타터 패키지, 
설정방식 :  자동(pplication.properties만 수정)
서버실행 : 내장 서버 지원(Tomcat)
프로젝트 시작 : Spring Boot Starter 사용으로 간단함
-> 설정을 자동화하고 빠르게 개발할때 사용
