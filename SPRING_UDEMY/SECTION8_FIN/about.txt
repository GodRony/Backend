## 섹션 8 ##
1. 백그라운데에서 무슨 일이 벌어지는지?
프런트 컨트로러 패턴 : 사용하는 URL과 상관없이 Spring MVC에서 모든 요청은 디스패처 서블릿이 처리함
디스패처 서블릿 : 요청이 가장 먼저 도달하는곳 (url에 관계 x)
모든요청은 일단 디스패처 서블릿이 가장 먼저 처리함
디스패처 서블릿이 요청을 받으면 알맞은 컨트롤러와 매핑 그다음 그 메소드에 매핑함
Auto configuration : 웹 애플리케이션, Rest API에 빌드한다는 사실을 알고 알아서 디스패처 서블릿을 설정

2. 어떻게 객체가 JSON으로 변환되는지?
@ResponseBody + JacksonHttpMessageConverters

3. versioning Rest API 에 대해
API 버전 관리하는것..
1) URL 에 버전 포함 : GET /api/v1/users
2) 쿼리 파람 이용 : GET /users?version=1
3) HTTP 헤더 사용 : Accept: application/vnd.myapp.v1+json
4) 미디어 타입 사용 : Content-Type: application/vnd.myapp.v1+json

URI Pollution : API 버전을 URL에 포함시키면 API 개수가 늘어날수록 URL이 너무 많아지고 관리가 어려워짐
대신 헤더 또는 미디어타입을 이용하는 방법을 고려할 수 있음.
Misuse of HTTP Headers : 헤더를 강제로 사용하면 불편해진다.
Caching : 응답을 캐싱하면 성능이 향상
브라우저에서 API 요청이 가능한지? : URL 방식 가능, 쿼리 가능, 헤더는 불가능..(브라우저 직접 실행이 어렵고 POSTMAN필요)
API Documentation : API 버전이 많아지면 문서를 정리하는것도 중요하다.
Swagger(OpenAPI) -> 자동 문서 생성 기ㅏ능

4.hateoas가 뭔지 또 hal이랑 머가다름?
hateoas 개념에 가까움 : EntityModel 같은걸로 링크 추가
hal hateoas의 개념을 구현하는 방식 : JSON형식으로 구현 , _links 속성이 들어간 JSON 응답

5. 정적직렬화가 뭐임
직렬화 : json이나 xml로 전환하는 작업
1. JSONProperty : 이름 커마하기
2. 선택된 영역만 리턴하기 
static filtering : @JsonIgnoreProperties (클래스위에서), @JsonIgnore
dynamic filtering : @JsonFilter

6. Spring Boot Actuator가 머임
애플리케이션 상태를 모니터링하고 관리하는 기능
그래서 bean이나 의존성 상태나 이런것들 알 수 있음 controller라던가
주요 엔드포인트 : health,logger,env,beans,mappings(url매핑저보) 등등
(서버관리자 DevOps가 사용하는거!!!!!!!!)

7. HAL이 머야 사실 API도 뭔지 잘 모르겟음
, API 응답에 HATEOAS 스타일의 링크를 포함해서 클라이언트가 API를 쉽게 탐색할 수 있도록 함
(클라가 사용하는거!!!!!!!!!)

8. h2와 연결하려고 할때 
dependency에서는..
<dependency>
	<groupId>com.h2database</groupId>
	<artifactId>h2</artifactId>
	<scope>runtime</scope>
</dependency>
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>
두가지를 추가해야함

application.properties에서 해야하는 설정
1.spring.h2.console.enabled=true
2. spring.datasource.url=jdbc:h2:mem:testdb 
3. spring.jpa.defer_datasource-initialization=true
테이블이 h2 DB가 생성되기전에 data.sql이 먼저 실행되어서 2번을 해줘야함

9. JPA와 연결
JPA를 사용하려면 엔터티를 쓰는 클래스에 기본생성자가 필요함.

10. UserJpaResource에서 EntityModel이 뭔지 공부해야할듯
EntitiyModel은 Spring HATEOAS에서 제공
클라가 _links를 통해 다른 API를 탐색할 수 있도록 도와줌

  User savedUser = userRepository.save(user);
  URI location = ServletUriComponentsBuilder. fromCurrentRequest()
	// 1. ServletUriComponentsBuilder.fromCurrentRequest(): 현재 요청된 URL을 가져옴.
	 .path("/{id}")
	// 2. .path("/{id}"): 현재 URL 끝에 {id}를 추가해서 새로 생성된 사용자의 ID를 포함하는 URL을 만들려고 함
               .buildAndExpand(savedUser.getId()).toUri();
         	// 3. .buildAndExpand(savedUser.getId()): 새로 저장된 사용자의 ID(savedUser.getId())를 {id} 위치에 넣음

        return ResponseEntity.created(location).build();


11. repository.save() 이거가 insert구문이랑 같음

12. FetchType에 대해서 공부하기 아니, 애초에 fetch란 무엇인지
fetch : 관계형 DV에서 다른 테이블의 데이터를 가져오는 방식을 설명
ex 사용자가 여러개의 주문을 갖고있을때 주문 데이터를 어떻게 가져올지 정의하는 방식
이때 사용자는 List<Order> order로 list로 정의하고 order는 그냥 User user 로 정의
order에서 Fetch를 해주는거임.
1) Eager(즉시로딩)
사용자 객체를 조회하면 주문 정보도 함께 조회
2) Lazy(지연로딩)
사용자 정보는 조회할때 주문정보는 조회하지 않고 주문이 필요할때만 별도로 쿼리를 실행해 데이터 갖고오기..
연관 데이터 사용할때마다 N+1문제가 발생할 수 있음.

13.
Hibernate: create sequence post_seq start with 1 increment by 50
Hibernate: create sequence user_details_seq start with 1 increment by 50
Hibernate: create table post (id integer not null, user_id integer, description varchar(255), primary key (id))
Hibernate: create table user_details (birth_date date, id integer not null, name varchar(255), primary key (id))
Hibernate: alter table if exists post add constraint FKa3biitl48c71riii9uyelpdhb foreign key (user_id) references user_details

14. 필터체인이 뭐고 CSRF가머임
필터체인 : 요청과 응답을 가로채는 일련의 필터
필터 체인 내에서 **요청이 끝나면 실제 서비스(컨트롤러)**로 넘어가고, 서비스에서 처리가 끝나면 응답을 다시 필터 체인으로 반환
CSRF는 웹 애플리케이션 취약점 중 하나로, 악의적인 웹사이트가 사용자의 권한을 도용해서 원하지 않는 요청을 보내는 공격 방법


