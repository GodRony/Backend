
##### Security에 대해 #####
1. SecurityContext :
Spring Security에서 인증(authentication) 및 권한 부여(authorization)와 
관련된 정보를 SecurityContext를 통해 관리.
현재 사용자의 인증 및 권한 정보를 보관하는 객체
예를 들어, 사용자가 로그인하면 이 정보는 SecurityContext에 저장됨.

2. SecurityContextHolder :
현재 스레드나 요청에 대해 SecurityContext에 접근할 수 있게 해주는 클래스 (접근하게..! 포인트 )
SecurityContextHolder는 getContext() 메서드를 통해 현재 SecurityContext를 반환하고, 이를 통해 인증된 사용자의 정보를 얻을 수 있음.

3. Authentication 객체:
SecurityContext 안에 Authentication 객체가 여러개 드가는거임.
이 객체는 현재 사용자의 인증 상태가 들어감. 
username, roles, authorities, credentials(비밀번호) 정보가 들어가있음
Authentication 객체를 통해 사용자가 인증된 상태인지, 어떤 권한을 가지고 있는지 알 수 있습니다.

# SecurityContext의 동작 흐름 #
1. 사용자가 로그인하면 spring security는 인증을 처리하고 Authentication 객체를 생성함.
2. 인증된 Authentication 객체는 SecurityContext에 저장됨
3. SecurityContextHolder를 통해 애플리케이션 어디서든 현재 인증된 사용자에 대한 정보를 사용할 수 있음.

# 관련 예시#
1. 로그인 후 사용자 정보 확인 :
Authentication authentication = SecurityContextHolder.getContext().getAuthentication(); // 사용자는 인증
String username = authentication.getName();  // 현재 로그인한 사용자의 이름
2. 사용자 권한 정보 확인
Collection<? extends GrantedAuthority> authorities = authentication.getAuthorities(); // 사용자 인증에서 권한 갖고오기
for (GrantedAuthority authority : authorities) {
    System.out.println("User has authority: " + authority.getAuthority());
}
참고로
Collection이란 list, set queue같은 여러 종류의 컬렉션을 포함하는 최상위 인터페이스임.
그래서 Collection<String> list = new ArrayList<>();  처럼 리스트도 collection의 구현체가 됨.
? extends T는 어떤 타입이든 T를 상속하거나 구현하는 타입임.
Collection<? extends GrantedAuthority> authorities;는
GrantedAuthority를 상속한 어떤 클래스의 객체를 포함하는 Collection.
GrantedAuthority 인터페이스를 구현한 클래스들이 컬렉션에 들어갈 수 있습니다. 
예를 들어, SimpleGrantedAuthority 클래스 같은 것들이 이에 들어갈 수 있음.

##### Controller vs Service #####
1. Controller :
사용자가 웹 페이지나 API를 통해 요청을 보냄.
Controller는 그 요청을 받아서 서비스(Service) 계층으로 로직을 넘김.
서비스가 비즈니스 로직을 처리하고, 그 결과를 Controller에 전달. 또 API 요청
(예를들어 컨트롤러에서 getUserById(id)이렇게 하면은 서비스 계층으로 넘기는거임 즉 서비스 호출)
Controller는 그 결과를 **뷰(View)**로 전달하거나 JSON, XML 등으로 응답을 반환
2. Service :
비지니스 로직을 처리하는 계층
웹 요청에 대한 구체적인 처리 x (이건 컨트롤러가함) DB처리, 계산, 외부 API 호출 , DB 연산을 함
Controller에서 요청받은 데이터를 바탕으로 필요한 로직을 실행
-> 정리 : 컨트롤러가 비지니스 로직을 요청하고 서비스가 비지니스 로직을 수행하고 컨트롤러에 반환한다.


##### 궁금했던 문법 이모저모 #####
## 1. Predicate와 Stream ##
Predicate<? super Todo> predicate =  todo -> todo.getUsername().equalsIgnoreCase(username);
자바의 함수형 인터페이스 조건을 검사하는 함수 <T>에서 T를 받아서 boolean 값으 반환하는 람다식을 사용할 수 있게함.
todos.stream() → 리스트(todos)를 스트림(Stream)으로 변환
.filter(predicate) → Predicate을 이용해서, 조건을 만족하는 요소들(복수)만 남김
.toList() → 필터링된 요소들을 리스트로(여러개일수도있으니!) 변환하여 반환
(스트림이란 컬렉션(list,set,map) 데이터를 반복문 없이 처리할수있는 기능, for문이나 while문 처럼 반복x)
하나만 갖고오게 하고싶으면 .findFirst()를 사용하면 돼.

## 2. 여러 어노테이션들 ##
1. Componet
자동으로 Bean 등록 (Spring이 객체를 관리)
클래스 자체를 Bean으로 등록
2. Bean 
Component와 다르게 스프링이 직접 클래스를 관리하지 않음. 내가 직접 빈을 만듬
라이브러리처럼 직접 수정할 수 없는 클래스를 Bean으로 등록할 때 사용
직접 객체 생성 후 Bean으로 등록
메서드를 통해 등록
3. Autowired
Component나 Bean으로 등록된 Bean을 가져다 씀
new연산자로 객체를 만들 필요가 없음.
Spring이 등록한 Bean을 자동으로 주입
4. Configuration
Bean을 설정하는 클래스
5. Service Repository Controller 등
@Component의 하위 개념(특정 역할을 나타냄) 클래스 위에 선언

결론
Spring이 객체를 관리하면 Bean이라 부름
Component는 자동으로 Bean을 관리(클래스로), Bean은 직접 Bean을 등록하는법
Autowired는 Spring이 관리하는 Bean을 주입함
Configuration은 여러 개의 @Bean을 묶어서 관리하는 역할.

##3. SpringSecurityConfiguration 에 대해 ##
1. InMemoryUserDetailsManager란
Spring Security에서 제공하는 UserDetailsService의 구현체
메모리에 사용자 정보를 저장하는 역할 (메모리에  정보저장!! POINT)
DB없이 간단한 사용자 인증을 테스트할 때 사용됨.
@Configuration을 붙이면 다른곳에서 @Autowired를 통해 쉽게 사용가능함.

2. UserDetailsService의 
Spring Security에서 로그인할 때 사용자의 정보를 가져오는 인터페이스
loadUserByUsername(String username) 메서드를 구현해야 함
주로 DB에서 사용자 정보를 불러오는 역할을 수행

3. UserDetails 클래스
Spring Security에서 사용자의 정보를 표현하는 인터페이스, 사용자 ID, 비번, 권한 계정상태등을 포함함.
예시 UserDetails userDetails = User.builder()
        .username("in28minutes") // 사용자 ID
        .password(new BCryptPasswordEncoder().encode("dummy")) // 비밀번호 암호화
        .roles("USER") // 역할 설정
        .build();
등으로 사용

4.   Function<String, String> passwordEncoder = input -> passwordEncoder().encode(input);
Function<T, R> 인터페이스는 람다식을 사용할 수 있게 해주는 함수형 인터페이스
T입력타입, R출력타입

InMemoryUserDetailsManager는 저장방식이 메모리, 개발/테스트용으로 사용, but 서버종료시 정보 사라짐, 빠름
CustomUserDetailsService는 DB에 저장됨, 실무에서 사용자인증, DB에 저장되서 정보 유지, 느림

5. SecurityFilterChain란?

6. Entity
Entity는 Bean을 DB 테이블에 매핑할 수 있게함.
DB에 Todo DB 있다고 가정하면 JPA를 통해 Bean을 DB에 매핑할 수 있음.
그걸 @Entity 어노테이션을 추가하면 그렇게 할 수 있음.
Todo가 엔티티면 이 Bean이 DB테이블에 매핑됨!
근데, 스프링 부트는 만일 Entitiy가 발견되면 자동으로 H2에 테이블을 매핑함

7. data.sql은 엔터티가 처리되기 전에 실행됨
따라서 spring.jpa.defer-datasource-initialization=true를 추가해주자

8. Repository는?
리포지토리를 사용하면 엔터티에 액션을 수행할 수 있음.

9.
    @RequestMapping(value="add-todo", method = RequestMethod.POST)
    public String addNewTodo(ModelMap model, @Valid Todo todo, BindingResult result) {
여기서 @Valid는 뭐더라?
